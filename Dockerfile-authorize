# syntax=docker/dockerfile:1
FROM mcr.microsoft.com/dotnet/sdk:8.0-alpine AS build-env

# Set build arguments and environment variables
ARG BUILD_CONFIGURATION=Release
ENV DOTNET_CLI_TELEMETRY_OPTOUT=1 \
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1 \
    DOTNET_NOLOGO=true

WORKDIR /src

# Copy project files for better cache usage
COPY AUTHORIZATION/AUTHORIZATION.API/*.csproj AUTHORIZATION/AUTHORIZATION.API/
COPY AUTHORIZATION/AUTHORIZATION.APPLICATION/*.csproj AUTHORIZATION/AUTHORIZATION.APPLICATION/
COPY AUTHORIZATION/AUTHORIZATION.INFRASTRUCTURE/*.csproj AUTHORIZATION/AUTHORIZATION.INFRASTRUCTURE/
COPY AUTHORIZATION/AUTHORIZATION.PERSISTENCE/*.csproj AUTHORIZATION/AUTHORIZATION.PERSISTENCE/
COPY AUTHORIZATION/AUTHORIZATION.PRESENTATION/*.csproj AUTHORIZATION/AUTHORIZATION.PRESENTATION/
COPY AUTHORIZATION/AUTHORIZATION.CONTRACT/*.csproj AUTHORIZATION/AUTHORIZATION.CONTRACT/
COPY CONTRACT/CONTRACT/*.csproj CONTRACT/CONTRACT/
COPY COMMAND/COMMAND.INFRASTRUCTURE/*.csproj COMMAND/COMMAND.INFRASTRUCTURE/
COPY COMMAND/COMMAND.PERSISTENCE/*.csproj COMMAND/COMMAND.PERSISTENCE/
COPY COMMAND/COMMAND.CONTRACT/*.csproj COMMAND/COMMAND.CONTRACT/
COPY E_COMMERCE_TEDDYBEAR_SHOP.ServiceDefaults/*.csproj E_COMMERCE_TEDDYBEAR_SHOP.ServiceDefaults/

# Restore dependencies
RUN dotnet restore AUTHORIZATION/AUTHORIZATION.API/AUTHORIZATION.API.csproj --verbosity minimal -r linux-musl-x64

# Copy only necessary source files (exclude tests, obj, bin folders)
COPY AUTHORIZATION/AUTHORIZATION.API/ AUTHORIZATION/AUTHORIZATION.API/
COPY AUTHORIZATION/AUTHORIZATION.APPLICATION/ AUTHORIZATION/AUTHORIZATION.APPLICATION/
COPY AUTHORIZATION/AUTHORIZATION.INFRASTRUCTURE/ AUTHORIZATION/AUTHORIZATION.INFRASTRUCTURE/
COPY AUTHORIZATION/AUTHORIZATION.PERSISTENCE/ AUTHORIZATION/AUTHORIZATION.PERSISTENCE/
COPY AUTHORIZATION/AUTHORIZATION.PRESENTATION/ AUTHORIZATION/AUTHORIZATION.PRESENTATION/
COPY AUTHORIZATION/AUTHORIZATION.CONTRACT/ AUTHORIZATION/AUTHORIZATION.CONTRACT/
COPY CONTRACT/CONTRACT/ CONTRACT/CONTRACT/
COPY COMMAND/COMMAND.INFRASTRUCTURE/ COMMAND/COMMAND.INFRASTRUCTURE/
COPY COMMAND/COMMAND.PERSISTENCE/ COMMAND/COMMAND.PERSISTENCE/
COPY COMMAND/COMMAND.CONTRACT/ COMMAND/COMMAND.CONTRACT/
COPY E_COMMERCE_TEDDYBEAR_SHOP.ServiceDefaults/ E_COMMERCE_TEDDYBEAR_SHOP.ServiceDefaults/

# Build and publish with optimizations for size - removing incompatible options
WORKDIR /src/AUTHORIZATION/AUTHORIZATION.API
RUN dotnet publish -c ${BUILD_CONFIGURATION} -o /app/out \
    -r linux-musl-x64 \
    --self-contained false \
    /p:DebugType=None \
    /p:DebugSymbols=false

# Create a smaller intermediate image by removing unnecessary files
FROM mcr.microsoft.com/dotnet/runtime-deps:8.0-alpine AS cleaner
WORKDIR /app
COPY --from=build-env /app/out .

# Remove unnecessary files to reduce image size
RUN find . -name "*.pdb" -type f -delete && \
    find . -name "*.xml" -type f -delete && \
    find . -name "*.dev.json" -type f -delete

# Use smaller runtime image
FROM mcr.microsoft.com/dotnet/aspnet:8.0-alpine AS runtime

# Add only required packages and clean cache in same layer
RUN apk add --no-cache icu-libs curl && \
    rm -rf /var/cache/apk/*

# Set globalization invariant
ENV DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false \
    ASPNETCORE_URLS=http://+:8080 \
    # Disable creation of .NET telemetry files
    COMPlus_EnableDiagnostics=0

# Create non-root user for security
RUN addgroup -g 1000 dotnet && adduser -u 1000 -G dotnet -h /app -s /bin/sh -D dotnet
USER dotnet
WORKDIR /app

# Copy only the published output from the cleaner stage
COPY --from=cleaner --chown=dotnet:dotnet /app .

# Configure container startup
EXPOSE 8080
ENTRYPOINT ["dotnet", "AUTHORIZATION.API.dll"]
