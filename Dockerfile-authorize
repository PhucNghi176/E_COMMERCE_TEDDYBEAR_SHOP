# syntax=docker/dockerfile:1.4
FROM mcr.microsoft.com/dotnet/sdk:8.0-alpine AS build-env

# Set build arguments and environment variables for optimization
ARG BUILD_CONFIGURATION=Release
ARG TARGETARCH
ENV DOTNET_CLI_TELEMETRY_OPTOUT=1 \
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1 \
    DOTNET_NOLOGO=true \
    DOTNET_USE_POLLING_FILE_WATCHER=false \
    NUGET_XMLDOC_MODE=skip

WORKDIR /src

# Copy solution file first for better layer caching
COPY *.sln ./

# Copy all project files in optimal order (most stable first)
# ServiceDefaults and CONTRACT are shared and change less frequently
COPY E_COMMERCE_TEDDYBEAR_SHOP.ServiceDefaults/*.csproj E_COMMERCE_TEDDYBEAR_SHOP.ServiceDefaults/
COPY CONTRACT/CONTRACT/*.csproj CONTRACT/CONTRACT/

# Copy shared COMMAND dependencies (Authorization depends on some COMMAND components)
COPY COMMAND/COMMAND.INFRASTRUCTURE/*.csproj COMMAND/COMMAND.INFRASTRUCTURE/
COPY COMMAND/COMMAND.PERSISTENCE/*.csproj COMMAND/COMMAND.PERSISTENCE/
COPY COMMAND/COMMAND.CONTRACT/*.csproj COMMAND/COMMAND.CONTRACT/

# Copy AUTHORIZATION project files
COPY AUTHORIZATION/AUTHORIZATION.API/*.csproj AUTHORIZATION/AUTHORIZATION.API/
COPY AUTHORIZATION/AUTHORIZATION.APPLICATION/*.csproj AUTHORIZATION/AUTHORIZATION.APPLICATION/
COPY AUTHORIZATION/AUTHORIZATION.INFRASTRUCTURE/*.csproj AUTHORIZATION/AUTHORIZATION.INFRASTRUCTURE/
COPY AUTHORIZATION/AUTHORIZATION.PERSISTENCE/*.csproj AUTHORIZATION/AUTHORIZATION.PERSISTENCE/
COPY AUTHORIZATION/AUTHORIZATION.PRESENTATION/*.csproj AUTHORIZATION/AUTHORIZATION.PRESENTATION/
COPY AUTHORIZATION/AUTHORIZATION.CONTRACT/*.csproj AUTHORIZATION/AUTHORIZATION.CONTRACT/

# Restore dependencies with error handling
RUN dotnet nuget locals all --clear && \
    dotnet restore AUTHORIZATION/AUTHORIZATION.API/AUTHORIZATION.API.csproj \
    --verbosity minimal \
    -r linux-musl-x64 \
    --disable-parallel \
    --force

# Copy source code (in order of change frequency - least changing first)
COPY E_COMMERCE_TEDDYBEAR_SHOP.ServiceDefaults/ E_COMMERCE_TEDDYBEAR_SHOP.ServiceDefaults/
COPY CONTRACT/CONTRACT/ CONTRACT/CONTRACT/
COPY COMMAND/COMMAND.INFRASTRUCTURE/ COMMAND/COMMAND.INFRASTRUCTURE/
COPY COMMAND/COMMAND.PERSISTENCE/ COMMAND/COMMAND.PERSISTENCE/
COPY COMMAND/COMMAND.CONTRACT/ COMMAND/COMMAND.CONTRACT/
COPY AUTHORIZATION/AUTHORIZATION.CONTRACT/ AUTHORIZATION/AUTHORIZATION.CONTRACT/
COPY AUTHORIZATION/AUTHORIZATION.PERSISTENCE/ AUTHORIZATION/AUTHORIZATION.PERSISTENCE/
COPY AUTHORIZATION/AUTHORIZATION.INFRASTRUCTURE/ AUTHORIZATION/AUTHORIZATION.INFRASTRUCTURE/
COPY AUTHORIZATION/AUTHORIZATION.APPLICATION/ AUTHORIZATION/AUTHORIZATION.APPLICATION/
COPY AUTHORIZATION/AUTHORIZATION.PRESENTATION/ AUTHORIZATION/AUTHORIZATION.PRESENTATION/
COPY AUTHORIZATION/AUTHORIZATION.API/ AUTHORIZATION/AUTHORIZATION.API/

# Build and publish with optimizations
WORKDIR /src/AUTHORIZATION/AUTHORIZATION.API
RUN dotnet publish -c ${BUILD_CONFIGURATION} -o /app/out \
    -r linux-musl-x64 \
    --self-contained false \
    --no-restore \
    /p:DebugType=None \
    /p:DebugSymbols=false \
    /p:PublishTrimmed=false \
    /p:PublishSingleFile=false

# Cleaner stage
FROM mcr.microsoft.com/dotnet/runtime-deps:8.0-alpine AS cleaner
WORKDIR /app
COPY --from=build-env /app/out .

# Remove unnecessary files to reduce image size
RUN find . -name "*.pdb" -type f -delete && \
    find . -name "*.xml" -type f -delete && \
    find . -name "*.dev.json" -type f -delete && \
    find . -name "*.Development.json" -type f -delete

# Runtime stage
FROM mcr.microsoft.com/dotnet/aspnet:8.0-alpine AS runtime

# Install required packages and clean cache in same layer
RUN apk add --no-cache icu-libs curl tzdata && \
    rm -rf /var/cache/apk/*

# Set environment variables
ENV DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false \
    ASPNETCORE_URLS=http://+:8080 \
    DOTNET_EnableDiagnostics=0 \
    DOTNET_USE_POLLING_FILE_WATCHER=false \
    ASPNETCORE_LOGGING__CONSOLE__DISABLECOLORS=true

# Create non-root user for security
RUN addgroup -g 1000 dotnet && \
    adduser -u 1000 -G dotnet -h /app -s /bin/sh -D dotnet

USER dotnet
WORKDIR /app

# Copy application files
COPY --from=cleaner --chown=dotnet:dotnet /app .

# Configure container startup
EXPOSE 8080
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

ENTRYPOINT ["dotnet", "AUTHORIZATION.API.dll"]
