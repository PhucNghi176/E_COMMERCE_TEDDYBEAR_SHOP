name: Build and Deploy

on:
  push:
    branches: [ main ]

env:
  APPSETTING: ${{ secrets.APPSETTING }}

jobs:
  build:
    runs-on: [ self-hosted ]
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false  # Avoids .git/FETCH_HEAD permission issues

      - name: Fix permissions and prepare directories
        run: |
          sudo chown -R $USER:$USER .  # Fixes .git/FETCH_HEAD issue
          mkdir -p QUERY/QUERY.API COMMAND/COMMAND.API AUTHORIZATION/AUTHORIZATION.API
          # Remove any existing files/directories named "appsettings.json"
          rm -rf QUERY/QUERY.API/appsettings.json COMMAND/COMMAND.API/appsettings.json AUTHORIZATION/AUTHORIZATION.API/appsettings.json
          # Write new files with proper content verification
          echo "$APPSETTING" > QUERY/QUERY.API/appsettings.json
          echo "$APPSETTING" > COMMAND/COMMAND.API/appsettings.json
          echo "$APPSETTING" > AUTHORIZATION/AUTHORIZATION.API/appsettings.json
          # Verify files were created and have content
          if [ ! -s QUERY/QUERY.API/appsettings.json ] || [ ! -s COMMAND/COMMAND.API/appsettings.json ] || [ ! -s AUTHORIZATION/AUTHORIZATION.API/appsettings.json ]; then
            echo "ERROR: One or more appsettings.json files are empty or missing"
            ls -la QUERY/QUERY.API/appsettings.json COMMAND/COMMAND.API/appsettings.json AUTHORIZATION/AUTHORIZATION.API/appsettings.json
            exit 1
          fi
          # Set proper permissions
          chmod 644 QUERY/QUERY.API/appsettings.json COMMAND/COMMAND.API/appsettings.json AUTHORIZATION/AUTHORIZATION.API/appsettings.json
          echo "appsettings.json files created successfully:"
          ls -la QUERY/QUERY.API/appsettings.json COMMAND/COMMAND.API/appsettings.json AUTHORIZATION/AUTHORIZATION.API/appsettings.json

      - name: Build Authorize API Image
        run: docker build -f Dockerfile-authorize -t authorize-api:latest --target runtime --build-arg DOTNET_NoWarn="NETSDK1138,CA1416,CS1591,CS0618,CS8632,NU1701,CS8600,CS8602,CS8603,CS8604,CS8618,CS8619,CS8625,CS8765" .
        
      - name: Build Command API Image
        run: docker build -f Dockerfile-command -t command-api:latest --target runtime --build-arg DOTNET_NoWarn="NETSDK1138,CA1416,CS1591,CS0618,CS8632,NU1701,CS8600,CS8602,CS8603,CS8604,CS8618,CS8619,CS8625,CS8765" .
        
      - name: Build Query API Image
        run: docker build -f Dockerfile-query -t query-api:latest --target runtime --build-arg DOTNET_NoWarn="NETSDK1138,CA1416,CS1591,CS0618,CS8632,NU1701,CS8600,CS8602,CS8603,CS8604,CS8618,CS8619,CS8625,CS8765" .

  deploy:
    runs-on: [ self-hosted ]
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Prepare Configuration
        run: |
          sudo chown -R $USER:$USER .
          mkdir -p QUERY/QUERY.API COMMAND/COMMAND.API AUTHORIZATION/AUTHORIZATION.API
          # Remove any existing files/directories named "appsettings.json"
          rm -rf QUERY/QUERY.API/appsettings.json COMMAND/COMMAND.API/appsettings.json AUTHORIZATION/AUTHORIZATION.API/appsettings.json
          # Create appsettings.json files with proper content verification
          echo "$APPSETTING" > QUERY/QUERY.API/appsettings.json
          echo "$APPSETTING" > COMMAND/COMMAND.API/appsettings.json
          echo "$APPSETTING" > AUTHORIZATION/AUTHORIZATION.API/appsettings.json
          # Verify files were created and have content
          if [ ! -s QUERY/QUERY.API/appsettings.json ] || [ ! -s COMMAND/COMMAND.API/appsettings.json ] || [ ! -s AUTHORIZATION/AUTHORIZATION.API/appsettings.json ]; then
            echo "ERROR: One or more appsettings.json files are empty or missing"
            ls -la QUERY/QUERY.API/appsettings.json COMMAND/COMMAND.API/appsettings.json AUTHORIZATION/AUTHORIZATION.API/appsettings.json
            exit 1
          fi
          # Set proper permissions
          chmod 644 QUERY/QUERY.API/appsettings.json COMMAND/COMMAND.API/appsettings.json AUTHORIZATION/AUTHORIZATION.API/appsettings.json
          echo "appsettings.json files created successfully:"
          ls -la QUERY/QUERY.API/appsettings.json COMMAND/COMMAND.API/appsettings.json AUTHORIZATION/AUTHORIZATION.API/appsettings.json

      - name: Deploy to Server (Password Auth)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          script: |
            cd /home/teddybear/E_COMMERCE_TEDDYBEAR_SHOP
            git pull origin main
            mkdir -p QUERY/QUERY.API COMMAND/COMMAND.API AUTHORIZATION/AUTHORIZATION.API
            
            # Ensure old appsettings are removed (whether they're files or directories)
            rm -rf QUERY/QUERY.API/appsettings.json COMMAND/COMMAND.API/appsettings.json AUTHORIZATION/AUTHORIZATION.API/appsettings.json
            
            # Echo appsettings with proper escaping and content verification
            echo '${{ secrets.APPSETTING }}' > QUERY/QUERY.API/appsettings.json
            echo '${{ secrets.APPSETTING }}' > COMMAND/COMMAND.API/appsettings.json
            echo '${{ secrets.APPSETTING }}' > AUTHORIZATION/AUTHORIZATION.API/appsettings.json
            
            # Verify files were created successfully
            if [ ! -s QUERY/QUERY.API/appsettings.json ] || [ ! -s COMMAND/COMMAND.API/appsettings.json ] || [ ! -s AUTHORIZATION/AUTHORIZATION.API/appsettings.json ]; then
              echo "ERROR: One or more appsettings.json files are empty or missing on server"
              ls -la QUERY/QUERY.API/appsettings.json COMMAND/COMMAND.API/appsettings.json AUTHORIZATION/AUTHORIZATION.API/appsettings.json
              exit 1
            fi
            
            # Set proper permissions
            chmod 644 QUERY/QUERY.API/appsettings.json COMMAND/COMMAND.API/appsettings.json AUTHORIZATION/AUTHORIZATION.API/appsettings.json
            echo "appsettings.json files created successfully on server:"
            ls -la QUERY/QUERY.API/appsettings.json COMMAND/COMMAND.API/appsettings.json AUTHORIZATION/AUTHORIZATION.API/appsettings.json
            
            # Copy appsettings directly to the Docker mount points that the containers will use
            cp QUERY/QUERY.API/appsettings.json /home/teddybear/E_COMMERCE_TEDDYBEAR_SHOP/QUERY/QUERY.API/appsettings.json
            cp COMMAND/COMMAND.API/appsettings.json /home/teddybear/E_COMMERCE_TEDDYBEAR_SHOP/COMMAND/COMMAND.API/appsettings.json
            cp AUTHORIZATION/AUTHORIZATION.API/appsettings.json /home/teddybear/E_COMMERCE_TEDDYBEAR_SHOP/AUTHORIZATION/AUTHORIZATION.API/appsettings.json
            
            # Start containers one by one instead of all at once
            docker compose down
            
            # Set environment variable for Docker build
            export APPSETTING='${{ secrets.APPSETTING }}'
            
            # Build each service individually with warnings ignored
            docker build -f Dockerfile-authorize -t authorize-api:latest --target runtime --build-arg DOTNET_NoWarn="NETSDK1138,CA1416,CS1591,CS0618,CS8632,NU1701,CS8600,CS8602,CS8603,CS8604,CS8618,CS8619,CS8625,CS8765" .
            docker build -f Dockerfile-command -t command-api:latest --target runtime --build-arg DOTNET_NoWarn="NETSDK1138,CA1416,CS1591,CS0618,CS8632,NU1701,CS8600,CS8602,CS8603,CS8604,CS8618,CS8619,CS8625,CS8765" .
            docker build -f Dockerfile-query -t query-api:latest --target runtime --build-arg DOTNET_NoWarn="NETSDK1138,CA1416,CS1591,CS0618,CS8632,NU1701,CS8600,CS8602,CS8603,CS8604,CS8618,CS8619,CS8625,CS8765" .
            
            # Verify appsettings are still present after build
            if [ ! -s QUERY/QUERY.API/appsettings.json ] || [ ! -s COMMAND/COMMAND.API/appsettings.json ] || [ ! -s AUTHORIZATION/AUTHORIZATION.API/appsettings.json ]; then
              echo "ERROR: One or more appsettings.json files are missing after build"
              exit 1
            fi
            
            # Start services with the Development environment for troubleshooting
            ASPNETCORE_ENVIRONMENT=Development docker compose up -d --remove-orphans
            
            # Clean up unused images
            docker image prune -af
