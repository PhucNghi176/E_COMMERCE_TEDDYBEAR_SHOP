name: Build and Deploy

on:
  push:
    branches: [ main ]

env:
  APPSETTING: ${{ secrets.APPSETTING }}

jobs:
  build:
    runs-on: [ self-hosted ]
    steps:
      - uses: actions/checkout@v4

      - name: Ensure directories exist and write appsettings
        run: |
          mkdir -p QUERY/QUERY.API COMMAND/COMMAND.API AUTHORIZATION/AUTHORIZATION.API
          echo "$APPSETTING" > QUERY/QUERY.API/appsettings.json
          echo "$APPSETTING" > COMMAND/COMMAND.API/appsettings.json
          echo "$APPSETTING" > AUTHORIZATION/AUTHORIZATION.API/appsettings.json

      - name: Build with Docker Compose
        run: docker compose build

  deploy:
    runs-on: [ self-hosted ]
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Prepare Configuration
        run: |
          mkdir -p QUERY/QUERY.API COMMAND/COMMAND.API AUTHORIZATION/AUTHORIZATION.API
          echo "$APPSETTING" > QUERY/QUERY.API/appsettings.json
          echo "$APPSETTING" > COMMAND/COMMAND.API/appsettings.json
          echo "$APPSETTING" > AUTHORIZATION/AUTHORIZATION.API/appsettings.json

      - name: Deploy to Server (Password Auth)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          script: |
            cd /home/teddybear/E_COMMERCE_TEDDYBEAR_SHOP
            git pull origin main
            mkdir -p QUERY/QUERY.API COMMAND/COMMAND.API
            echo '${{ secrets.APPSETTING }}' > QUERY/QUERY.API/appsettings.json
            echo '${{ secrets.APPSETTING }}' > COMMAND/COMMAND.API/appsettings.json
            docker compose down
            docker compose build --no-cache
            docker compose up -d --remove-orphans
            docker image prune -af
